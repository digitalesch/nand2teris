<tokens>
<keyword>class</keyword>
<identifier>Expression</identifier>
<symbol>{</symbol>
<keyword>static</keyword>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>;</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>func1</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>b</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>c</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<identifier>b</identifier>
<symbol>+</symbol>
<identifier>c</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>func2</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>a</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>length</identifier>
<symbol>,</symbol>
<identifier>teste</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>char</keyword>
<identifier>t</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<identifier>a</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>func3</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
</tokens>
